import unittest
from flask_login import current_user
from werkzeug.security import check_password_hash
from app import app, db, User

class FlaskTestCase(unittest.TestCase):

    def setUp(self):
        self.app = app
        self.app.config['TESTING'] = True
        self.app.config['WTF_CSRF_ENABLED'] = False
        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
        self.client = self.app.test_client()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_register(self):
        response = self.client.post('/register', data=dict(username="testuser", password="testpassword", confirm_password="testpassword"), follow_redirects=True)
        user = User.query.filter_by(username="testuser").first()
        self.assertTrue(user is not None)
        self.assertTrue(check_password_hash(user.password, "testpassword"))
        self.assertIn(b'dashboard', response.data)

    def test_login_logout(self):
        self.client.post('/register', data=dict(username="testuser", password="testpassword", confirm_password="testpassword"), follow_redirects=True)
        response = self.client.post('/login', data=dict(username="testuser", password="testpassword"), follow_redirects=True)
        self.assertIn(b'dashboard', response.data)
        self.assertTrue(current_user.is_authenticated)
        response = self.client.get('/logout', follow_redirects=True)
        self.assertIn(b'login', response.data)
        self.assertFalse(current_user.is_authenticated)

    def test_invalid_login(self):
        response = self.client.post('/login', data=dict(username="wronguser", password="wrongpassword"), follow_redirects=True)
        self.assertIn(b'Invalid username or password', response.data)

    def test_home_redirect(self):
        response = self.client.get('/', follow_redirects=False)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response.location, "http://localhost/login")

if __name__ == '__main__':
    unittest.main()